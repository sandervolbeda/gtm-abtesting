{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>The goal of this website is to make A/B testing available to everyone. To do this, we will only be using free tools.</p> <p>The tools we will be using are:</p> <p>Google Analytics 4 is a free web analytics service offered by Google. It is the successor to Universal Analytics and was released in October 2020.</p> <p>Google Tag Manager is a free web application that allows you to manage your website's tags without having to edit your website's code.</p> <p>Get started</p>"},{"location":"#learn-more-from-my-podcast","title":"Learn more from my Podcast","text":"<p>If you prefer to listen to the specifics instead of reading the entire page, that option is now available. The principles are also clarified in this episode of \"Golden Nuggets for Experimentation\".</p>"},{"location":"#proscons","title":"Pros/Cons","text":"<p>Pros:</p> <ul> <li>Easy initial setup</li> <li>Integrates well with GA4</li> <li>Client-side</li> <li>Free</li> <li>Does not use cookies (uses localStorage)</li> <li>Loads asynchronously (still flickering might occur)</li> </ul> <p>Cons:</p> <ul> <li>Requires technical understanding of GTM to scale experimentation</li> <li>No WYSIWYG editor</li> <li>Requires JavaScript to run experiments</li> <li>Data accuracy may be affected due to GA4 (if BigQuery is not used)</li> </ul>"},{"location":"#written-explanation","title":"Written Explanation","text":"<p>This process is asynchronous, which means that it occurs during the website loading phase rather than after it has loaded.</p> <p>When a visitor lands on your website, Google Tag Manager triggers the initialisation event, which is the first thing we set up. This event triggers the initialisation trigger.</p> <p>The initialisation trigger fires the splitter tag, which executes JavaScript code that splits traffic and saves the version of the experiment in the visitor's localStorage.</p> <p>The GA4 configuration tag is triggered by the page view trigger, which sends data to GA4 with a version variable.</p> <p>The container-loaded event can also trigger two tags, depending on the stored version.</p> <p>If the version includes slots 5, 6, 7, 8, or 9, the variant trigger is fired, which executes the variant tag that contains the experiment code.</p> <p>If the version includes slots 0, 1, 2, 3, or 4, the control trigger is fired, which executes the control tag.</p> <p>Each slot represents 10% of the traffic, and the number of slots is used to randomly split traffic and facilitate Multi-Variant Testing.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>This section keeps you informed about recent updates and what's planned for the future.</p>"},{"location":"changelog/#currently-in-progress","title":"Currently in Progress","text":"<ol> <li>Anti-flickering solution</li> <li>Creating videos to enhance content</li> <li>Multi-Variant Testing (MVT)</li> <li>Different ways of Page Targeting. Example: Based on body class.</li> </ol>"},{"location":"changelog/#update-6-10-2023","title":"Update 6-10-2023","text":"<ul> <li>New page: Class Based targeting.</li> </ul> <p>This kind of targetting can help if the URL structure is inconsistent to use for page path targetting. This is especially handy with WordPress for example.</p>"},{"location":"changelog/#update-5-10-2023","title":"Update 5-10-2023","text":"<ul> <li>New page: About me.</li> <li>Design updates to give more focus to the documentation.</li> <li>Added call-to-actions.</li> <li>Minor styling changes and content updates.</li> </ul>"},{"location":"changelog/#update-21-9-2023","title":"Update 21-9-2023","text":"<ul> <li>Updated recently added page React.</li> <li>New page: Start collecting heatmaps/recordings from your experiments using Microsoft Clarity.</li> </ul>"},{"location":"changelog/#update-20-9-2023","title":"Update 20-9-2023","text":"<ul> <li>Updated some content.</li> <li>Added work-around for React.</li> <li>Started testing how to collect heatmaps and recordings for specific experiments.</li> </ul>"},{"location":"changelog/#update-11-9-2023","title":"Update 11-9-2023","text":"<ul> <li>Logo has been added.</li> <li>Replaced the favicon.</li> <li>General renamed Google Analytics 4 (GA4) to Google Analytics. </li> <li>Getting Started - Content of the pages Checklist &amp; Debug has been updated.</li> <li>Images have been added to every guide where nedeed.</li> </ul>"},{"location":"changelog/#update-23-08-2023","title":"Update 23-08-2023","text":"<p>All pages now contain content! Although images and videos are still pending, it's a solid starting point.</p>"},{"location":"contribution/","title":"Contribution","text":"<p>This all started when Google Optimize was about to go away. At that time, there weren't any good free or cheap options available.</p> <p>As I, Sander Volbeda, looked for different ways to do A/B tests, I found out you can actually use Google Tag Manager. It might not have been the first thing that came to mind. But the best part is, it's free and it's probably already there on the website you're trying to make better.</p> <p>If you require expert assistance in setting this up, you can explore the services I offer on my website. Feel welcome to get in touch with me through my website whenever you'd like, or connect with me on LinkedIn.</p>"},{"location":"development/","title":"Development","text":"<p>This is where you'll be able to find additional information for setting up experiments with Google Tag Manager.</p>"},{"location":"development/#how-to-build-experiments-with-javascript","title":"How To Build Experiments With JavaScript","text":""},{"location":"development/#javascript","title":"JavaScript","text":""},{"location":"development/#tampermonkey","title":"TamperMonkey","text":""},{"location":"development/#reduce-load-time","title":"Reduce Load Time","text":"<p>Minify/compress JavaScript</p>"},{"location":"development/#create-heatmaps-and-recording-of-your-variants","title":"Create heatmaps (and recording) of your variants","text":"<p>https://learn.microsoft.com/en-us/clarity/filters/custom-tags </p>"},{"location":"setup/","title":"Setup","text":"<p>Below is a quick checklist of what you need to get started.</p>"},{"location":"setup/#checklist","title":"Checklist","text":"<ol> <li>Google Tag Manager must be connected to the website.</li> <li>Publishing rights must be granted within the Google Tag Manager container.</li> <li>GA4 must be connected to the website.</li> <li>Admin access must be granted to the GA4 account that is linked.</li> <li>Basic knowledge of HTML, CSS, and JavaScript (JS) is recommended.</li> </ol> <p>Creating a custom definition in Google Analytics 4 is the first step. This will connect GA and GTM. It is important to start with this step, as it can take time for data to appear in GA4.</p>"},{"location":"setup/#google-analytics-4","title":"Google Analytics 4","text":"<p>Let's dive into GA4 first.</p> <p>It is important to note that, with the current setup, one user can only view one experiment. Therefore, running multiple experiments at the same time will drastically reduce the number of users in each experiment.</p> <ol> <li>Open Google Analytics 4.</li> <li>Go to Account &gt; Property.</li> <li>Click Custom definitions in the property list.</li> <li>Click the button Create custom dimensions.</li> <li> <p>Fill all the fields with the following details</p> Field: Input: Dimension name Version Scope User Description Used for analysing experiments from GTM User property Version </li> <li> <p>Save</p> </li> </ol> <p>[ADD IMAGE HERE]</p> <p>One downside of GA4 is that it can take time for data to appear. In some cases, it may take up to 48 hours after creating a custom definition for data to start showing in GA4.</p>"},{"location":"setup/#google-tag-manager","title":"Google Tag Manager","text":""},{"location":"setup/#workspace","title":"Workspace","text":"<p>It is recommended to avoid working directly on the master branch (or the default Workspace in this case). To begin, launch GTM (Google Tag Manager). In the left sidebar, locate the Default Workspace option and click on it. Then, in the upper right corner, look for the + icon and click on it.</p> <p>[ADD IMAGE HERE]</p> Field: Input: Name Experimentation setup Description Setting up everything to start with experimentation <p>Save.</p> <p>This will help ensure that no one else is working on the same version of the code as we are. It is a security measure to prevent conflicts and data loss.</p>"},{"location":"setup/#variable-version","title":"Variable (Version)","text":"<p>The first step is to create a new variable. This JavaScript will create the <code>version</code> row in the visitor's browser <code>localStorage</code>.</p> <p>It is important to note that browsers do not automatically reset <code>localStorage</code>, unlike cookies. Visitors can manually reset it by clearing their browser's cache and other stored data, but this is unlikely. As a result, running experiments in this manner can last longer than cookies that are automatically reset, which can improve the accuracy of your data.</p> <p>Steps:</p> <ol> <li>In the sidebar, navigate to Variables.</li> <li>Click Add new User-Defined Variable.</li> <li>Name the variable Version.</li> <li>In the Variable Configuration section, select Variable Type as Custom JavaScript.</li> <li>Copy and paste the following code into the variable:     <pre><code>function() {\nvar keyValue = localStorage.getItem('version');\nreturn keyValue;\n}\n</code></pre></li> <li>Save</li> </ol> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#triggers","title":"Triggers","text":"<p>Next, we will configure the triggers. Three triggers are required to execute a single experiment:</p> <ul> <li>Initialization trigger: This trigger fires when the experiment is first initialized.</li> <li>Control \u2013 Page View: This trigger fires when a visitor views the control page.</li> <li>Variant \u2013 Page View: This trigger fires when a visitor views the variant page.</li> </ul>"},{"location":"setup/#initialization","title":"Initialization","text":"<p>This trigger fires when the experiment is first initialized. To create it, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Triggers.</li> <li>Click the New button to create a new trigger.</li> <li>Name the trigger Experiment 1 \u2013 Initialization.</li> <li>Select Initialization as Page View.</li> <li> <p>Select This trigger fires on as Some Initialization Events.</p> Field: Input: First Page path Second equals Third / </li> <li> <p>Click Save.</p> </li> </ol> <ol> <li> <p>If the Path option is not in the list, select Choose Built-In Variable and then select Page path.</p> </li> <li> <p>The third field with the <code>/</code> represents the homepage.</p> </li> <li> <p>This is also where you can add more requirements, such as device targeting.</p> </li> </ol> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#control-page-view","title":"Control - Page View","text":"<p>Next, we will create the trigger for the control experiment. To do this, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Triggers.</li> <li>Click the New button to create a new trigger.</li> <li>Name the trigger Experiment 1 \u2013 Control \u2013 Page View.</li> <li>In the Trigger Configuration section, select Trigger Type as Page View and Trigger Event as Page View.</li> <li>In the Trigger Details section, select This trigger fires on as Some Page Views.</li> <li> <p>Add the following details to the first row.</p> Field: Input: First Version Second matches RegEx Third <code>Slot 0$|Slot 1$|Slot 2$|Slot 3$|Slot 4</code> </li> <li> <p>Add an additional row with the following details.</p> Field: Input: First Page path Second equals Third / </li> <li> <p>Click Save.</p> </li> </ol> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#variant-page-view","title":"Variant - Page View","text":"<p>Now, let\u2019s delve into the experiment trigger (for the variant).</p> <ol> <li>In Google Tag Manager, navigate to Triggers.</li> <li>Click the New button to create a new trigger.</li> <li>Name the trigger Experiment 1 \u2013 Variant \u2013 Page View.</li> <li>In the Trigger Configuration section, select Trigger Type as Page View and Trigger Event as Page View.</li> <li>In the Trigger Details section, select This trigger fires on as Some Page Views.</li> <li> <p>Add the following details to the first row.</p> Field: Input: First Version Second matches RegEx Third <code>Slot 5$|Slot 6$|Slot 7$|Slot 8$|Slot 9$</code> </li> <li> <p>Add an additional row with the following details.</p> Field: Input: First Page path Second equals Third / </li> <li> <p>Click Save.</p> </li> </ol> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#tags","title":"Tags","text":"<p>It is now time to add three new tags and make adjustments to the GA4 configuration. This will ensure that the data is sent to the custom definition we created in GA4.</p>"},{"location":"setup/#splitter-tag","title":"Splitter Tag","text":"<p>Once the Initialization trigger has been activated, we will use a tag to randomly assign visitors to either the control or variant. This split tag will be triggered accordingly.</p> <p>To create the split tag, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Tags.</li> <li>Click the New button to create a new tag.</li> <li>Name the tag Experiment 1 \u2013 Splitter.</li> <li>In the Tag Configuration section, select Tag Type as Custom HTML.</li> <li> <p>Copy and paste the following code into the Custom HTML block:</p> <pre><code>&lt;script&gt;\n(function () {\nvar slots = 10;\nvar version;\nif (localStorage.getItem('version')) {\nversion = localStorage.getItem('version');\n} else {\nvar random = Math.floor(Math.random() * slots);\nversion = 'Slot ' + (random);\nlocalStorage.setItem('version', version);\n}\nreturn version;\n})();\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Select the Trigger as Experiment 1 \u2013 Initialization.</p> </li> <li>Click Save.</li> </ol> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#control-tag","title":"Control Tag","text":"<p>Once the splitter tag has successfully executed and the user falls within one of the slots from 0 to 4, the control tag will be triggered.</p> <p>To create the control tag, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Tags.</li> <li>Click the New button to create a new tag.</li> <li>Name the tag Experiment 1 \u2013 Control \u2013 Script.</li> <li>In the Tag Configuration section, select Tag Type as Custom HTML.</li> <li> <p>Copy and paste the following code into the Custom HTML block:</p> <pre><code>&lt;script&gt;\n(function () {\n// experiment code here\nconsole.log(\"Control loaded\");\n})();\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Select the Trigger as Experiment 1 \u2013 Control \u2013 Page View.</p> </li> <li>Click Save.</li> </ol> <p>A script is also being run for the control variant. This allows for additional tracking to be set up, for example.</p> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#variant-tag","title":"Variant Tag","text":"<p>Once the splitter tag has successfully executed and the user falls within one of the slots from 5 to 9, the variant tag will be triggered.</p> <p>To create the variant tag, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Tags.</li> <li>Click the New button to create a new tag.</li> <li>Name the tag Experiment 1 \u2013 Variant \u2013 Script.</li> <li>In the Tag Configuration section, select Tag Type as Custom HTML.</li> <li> <p>Copy and paste the following code into the Custom HTML block:</p> <pre><code>&lt;script&gt;\n(function () {\n// experiment code here\nconsole.log(\"Variant loaded\");\n})();\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Select the Trigger as Experiment 1 \u2013 Variant \u2013 Page View.</p> </li> <li>Click Save.</li> </ol> <p>This is where you can add the JavaScript for your experiment to manipulate the page.</p> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#ga4-confirguration-tag","title":"GA4 Confirguration tag","text":"<p>To complete the setup, we need to edit the Google Analytics tag.</p> <ol> <li>Open the GA4 configuration tag.</li> <li>In the User Properties section, add a new row.</li> <li>In the Property name field, enter <code>Version</code>.</li> <li>In the Value field, enter the value of the <code>Version</code> variable.</li> <li>Click Save.</li> </ol> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#debug","title":"Debug","text":"<p>Before publishing the setup or starting a new experiment, it is always important to verify that it is working properly. Otherwise, you cannot trust the results of the experiment or the data that is collected.</p>"},{"location":"setup/#gtm-experiments","title":"GTM experiments","text":"<p>To verify that the experiment is working properly, we need to preview the changes on the website via Google Tag Manager.</p> <ol> <li> <p>Open the Preview mode in Google Tag Manager.</p> <p>[ADD IMAGE HERE]</p> </li> <li> <p>Navigate to the second step of the preview. The Experiment 1 \u2013 Splitter tag should be fired.</p> <p>[ADD IMAGE HERE]</p> </li> <li> <p>Move to the Variables tab and check if a Slot has been set with the Version (bottom row)</p> <p>[ADD IMAGE HERE]</p> </li> <li> <p>Navigate to step 3 in the left sidebar and verify whether Experiment 1 has been triggered. Depending on your version, the Control should be fired if your slot falls between 0 and 4, while the Variant should be fired if the slot value ranges from 5 to 9.</p> <p>[ADD IMAGE HERE]</p> <p>If everything seems to work, console log can be checked to see which Script has been fired.</p> </li> <li> <p>Open the website (still in preview mode of GTM), right-click and select Inspect. Now open the Console tab and check if there\u2019s anywhere <code>Control loaded</code> or <code>Variant loaded</code> in the content.</p> <p>[ADD IMAGE HERE]</p> </li> </ol> <p>Leave the GTM preview mode open before heading to the next step.</p>"},{"location":"setup/#ga4-events","title":"GA4 events","text":"<p>To use the Debugger view in Google Analytics 4, you will need to add the Google Analytics Debugger extension to your browser. This functionality applies to every website present in your Google Analytics account.</p> <ol> <li>Activate the extension on the preview page of Google Tag Manager.</li> <li>Go to Admin &gt; Account &gt; Property in your Google Analytics 4 account.</li> <li>Check for DebugView (the last item in the first list).</li> <li>Select your device from the dropdown. This may be difficult, but please try.</li> <li>Check if the Version is shown in the debug list.</li> </ol> <p>[ADD IMAGE HERE]</p> <p>Remember, as mentioned earlier, it can take up to 48 hours for data to be shown in GA4. However, the DebugView is live, so there might be a slight delay (a few seconds).</p>"},{"location":"setup/#folder-structure","title":"Folder Structure","text":"<p>Since there are numerous tags, triggers, and variables involved in experimentation, it is advisable to organize everything related to experimentation into a single folder (or create multiple folders if you prefer to structure them per experiment).</p> <ol> <li>Open Google Tag Manager.</li> <li>Select Folders in the left-hand menu.</li> <li>Click New Folder.</li> <li>Name it: Experimentation.</li> <li>Select all Experimentation-related items (do not include GA configuration).</li> <li>Select Move and move the items to the Experimentation folder.</li> </ol> <p>[ADD IMAGE HERE]</p>"},{"location":"setup/#publish-setupexperiment","title":"Publish Setup/Experiment","text":"<p>The setup is complete. To publish the experiment, follow these steps:</p> <ol> <li>Click the blue Submit button in the top right corner.</li> <li>Click Publish.</li> <li>Close the slide-in.</li> <li>Open the Workspace you are currently in.</li> <li>Click Update (next to This workspace is out of date).</li> <li>Click Update.</li> </ol> <p>[ADD IMAGE HERE]</p> <p>The experiment is now live!</p> <p>Important: Always start with an A/A test, which means no changes to the website, to make sure you collect the data you need. This setup includes an A/A test. Once you have published everything, make sure to check your website and the page you are running the experiment on with the console log of the developer tools. This will either show the message Control loaded or Variant loaded.</p>"},{"location":"setup/#view-experiment-live-site","title":"View Experiment (Live Site)","text":""},{"location":"splittest/","title":"Split Test Experiment","text":""},{"location":"targetting/","title":"Targetting","text":""},{"location":"targetting/#page-path","title":"Page path","text":""},{"location":"targetting/#device-type","title":"Device Type","text":""},{"location":"targetting/#based-on-class","title":"Based On Class","text":""},{"location":"analyses/clarity/","title":"Connecting with Microsoft Clarity","text":"<p>Microsoft Clarity offers a free and user-friendly tool to help website owners understand how their website visitors interact with their sites. This tool provides valuable insights through visual heatmaps and session recordings.</p> <p>Collecting heatmaps for experiments can reveal new insights. This can be done easily using GTM (Google Tag Manager).</p>"},{"location":"analyses/clarity/#adding-custom-tags","title":"Adding Custom Tags","text":"<p>To filter data effectively in Microsoft Clarity, custom tags need to be included in both the control and variant of the experiment.</p> <p>The required code is: <code>clarity(\"set\", \"key\", \"value\");</code></p> <p>Here are the three values that need to be specified:</p> <ol> <li>Set: Always set this as \"Set\" (no changes needed).</li> <li>Key: Enter your Experiment ID.</li> <li>Value: Indicate whether it's the Version, Control, or Variant.</li> </ol> <p>For instance, when building an experiment using this guide, use this code:</p> <p>For the control: <code>clarity(\"set\", \"experiment-1\", \"control\")</code>. For the variant: <code>clarity(\"set\", \"experiment-1\", \"variant\")</code>.</p> <p>Insert these lines of code into the JavaScript loaded for each variant. It's recommended to place this code as the last line in the experiment.</p> <p>Control Example:</p> <pre><code>&lt;script&gt;\n(function () {\n// Insert the experiment code here\nconsole.log(\"Control loaded\");\n// Add the custom tag\nclarity(\"set\", \"experiment-1\", \"control\");\n})();\n&lt;/script&gt;\n</code></pre> <p>Variant Example:</p> <pre><code>&lt;script&gt;\n(function () {\n// Insert the experiment code here\nconsole.log(\"Variant loaded\");\n// Add the custom tag\nclarity(\"set\", \"experiment-1\", \"variant\");\n})();\n&lt;/script&gt;\n</code></pre> <p>When adding the tag to the code, it will automatically update in the project within 30 minutes to 2 hours. Multiple tags can be added to a project.</p>"},{"location":"analyses/clarity/#how-to-filter-the-data","title":"How to filter the data","text":"<ol> <li>Open the Microsoft Clarity project.</li> <li>Click on the blue filter button near the project name in the upper left corner.</li> <li>Choose Customised filters from the left side-bar.</li> <li>Select tag (equals the set key).</li> <li>Select or type the value.</li> <li>Apply filters.</li> <li>Optionally: Adjust the date range to access more data.</li> </ol>"},{"location":"analyses/free-form/","title":"Free form Google Analytics","text":"<p>The experiment's analysis will be conducted through the utilization of Google Analytics, employing the free form option for this purpose.</p>"},{"location":"analyses/free-form/#segments","title":"Segments","text":"<ol> <li>Launch Google Analytics.</li> <li>Go to the Explore section.</li> <li>Generate a new Blank form.</li> </ol>"},{"location":"analyses/free-form/#control","title":"Control","text":"<ol> <li>Create the control segment.</li> <li>Choose User segment.</li> <li> <p>Name the segment Control.</p> Field: Input: Segment name Control Condition Version Filter is one of   <code>Slot 0 Slot 1 Slot 2 Slot 3 Slot 4</code> <p>Important! Ensure that each slot is placed on a separate row, as indicated by the placeholder.</p> <p></p> </li> <li> <p>Check At any point in time.</p> </li> <li>Save and apply.</li> </ol>"},{"location":"analyses/free-form/#variant","title":"Variant","text":"<ol> <li>Create the variant segment.</li> <li>Choose User segment.</li> <li> <p>Name the segment Variant.</p> Field: Input: Segment name Control Condition Version Filter is one of   <code>Slot 5 Slot 6 Slot 7 Slot 8 Slot 9</code> <p>Important! Ensure that each slot is placed on a separate row, as indicated by the placeholder.</p> <p></p> </li> <li> <p>Check At any point in time.</p> </li> <li>Save and apply.</li> <li>For PIVOT select First column</li> </ol> <p></p>"},{"location":"analyses/free-form/#dimensions","title":"Dimensions","text":"<p>Dimensions can be employed by selecting them. One commonly utilized dimension is Device category, which provides insights into the performance of experiments across different devices.</p>"},{"location":"analyses/free-form/#metrics","title":"Metrics","text":"<p>Select the metrics that require analysis. For instance, consider Total users and Purchases. The data will be displayed in the form.</p>"},{"location":"development/anti-flicker/","title":"Anti-Flicker (Alpha version - still testing)","text":"<p>This guide provides instructions on utilizing the anti-flicker snippet. This snippet enables the asynchronous loading of your GTM A/B testing scripts while concealing the page until the container is fully loaded. This ensures that users do not encounter the initial page content before it has been altered by an experiment.</p> <p>\"Flickering\" in A/B testing refers to inconsistent exposure to test versions, which should be minimized for reliable results. Why it's crucial:</p> <ol> <li> <p>Consistency: A/B testing requires controlled, consistent comparisons. Flicker disrupts this by showing different versions to the same users, causing confusion and unreliable data.</p> </li> <li> <p>Biased Results: Flicker introduces bias; users exposed inconsistently may behave differently, leading to misleading conclusions.</p> </li> <li> <p>Data Interpretation: Analyzing results with flicker is challenging as differences may stem from exposure inconsistency rather than variations themselves.</p> </li> </ol>"},{"location":"development/anti-flicker/#anti-flicker-script-alpha-version","title":"Anti-flicker script (alpha version)","text":"<p>This still needs some work. However the idea is that this script needs to be implement as high as possible within the <code>head</code> of the website. Most certainly before GTM.</p> <p>The scripts checks if the splitter tag is fired (since this fires as one of the first things). If that isn't the case, load the page. If the splitter tag is fired, check if the experiment script is fired. If that's fired, load the page.</p> <p>This script will decrease the load speed of the website in order to handle the anti-flicker effect. Currently in the process of testing it and finding the timing sweetspots.</p> <p>Add id=\"ab-splitter\" to the splitter tag. Ad id=\"ab-experiment\" to both the control and the variant script tag. </p> <pre><code>&lt;script&gt;\n(function(a, s, y, n, c, h, i, d, e) {\ns.className += ' ' + y;\nh.start = 1 * new Date;\nh.end = i = function() {\ns.className = s.className.replace(RegExp(' ?' + y), '');\n};\n// Function to check if the script with ID 'ab-splitter' is loaded\nfunction isAbSplitterLoaded() {\nreturn !!document.getElementById('ab-splitter');\n}\n// Function to check if 'ab-experiment' is active using the script tag\nfunction isAbExperimentLoaded() {\nvar scripts = document.getElementsByTagName('script');\nfor (var i = 0; i &lt; scripts.length; i++) {\nif (scripts[i].id === 'ab-experiment') {\nreturn true;\n}\n}\nreturn false;\n}\n// Check for 'ab-splitter' script every 100 milliseconds\nvar checkSplitterInterval = setInterval(function() {\nif (isAbSplitterLoaded()) {\nclearInterval(checkSplitterInterval); // Stop checking for 'ab-splitter'\nif (isAbExperimentLoaded()) {\n// Check for the script with the ID 'ab-experiment' every 100 milliseconds\nvar checkExperimentInterval = setInterval(function() {\nif (isAbExperimentLoaded()) {\nclearInterval(checkExperimentInterval); // Stop checking for 'ab-experiment'\ni(); // Show the page\n}\n}, 100);\n} else {\n// If 'ab-experiment' is not loaded, show the page immediately\ni();\n}\n}\n}, 100);\n// Set a timeout to reveal the page after 1000 milliseconds (1 second) if 'ab-splitter' is not loaded\nsetTimeout(function() {\nif (!isAbSplitterLoaded()) {\ni(); // Show the page\n}\n}, 1000);\nh.timeout = c;\n})(window, document.documentElement, 'async-hide', 'dataLayer', 4000, {});\n&lt;/script&gt;\n</code></pre>"},{"location":"development/react/","title":"Reduce Load Time","text":"<p>React is a JavaScript library used for building user interfaces on websites and web applications. It's a popular choice among developers because it makes it easier to create interactive and dynamic web pages. React allows you to break down your user interface into reusable components, which can help streamline development and improve code maintainability.</p> <p>Now, when it comes to loading external scripts in React, it can sometimes be a bit tricky. This challenge primarily arises from React's way of managing the DOM (Document Object Model) and its focus on ensuring a single source of truth for the UI.</p> <p>Here's a simplified explanation:</p> <ol> <li> <p>Virtual DOM: React uses a Virtual DOM, which is a lightweight representation of the actual DOM. When you update something in your React component, it first updates the Virtual DOM, not the real DOM. This is done for efficiency because changing the real DOM can be slow and resource-intensive.</p> </li> <li> <p>Asynchronous Updates: React often updates the DOM asynchronously. This means that when you load an external script, it might not immediately be recognized or integrated into the Virtual DOM or the actual DOM. React might not \"see\" the changes made by the script right away.</p> </li> </ol>"},{"location":"development/react/#solving-this-issue","title":"Solving this issue","text":"<p>There is a work-around. In JavaScript, <code>window.onload</code> is an event handler that's used to execute a function or a block of code when a web page has finished loading completely. It's like telling JavaScript, \"Hey, wait until everything on the web page is ready, including all images, styles, and scripts, and then do something.\"</p> <pre><code>&lt;script&gt;\n(function () {\n// start window.onload\nwindow.onload = function() {\n'use strict';\n// experiment code here\n};\n// end window.onload\n})();\n&lt;/script&gt;\n</code></pre> <p>Keep in mind that it increasing the change of the flickering effect.</p>"},{"location":"development/reduce-load-time/","title":"Reduce Load Time","text":"<p>Site speed is very important for multiple reasons.</p> <ol> <li> <p>Reduced File Size: Minification significantly shrinks the size of the JavaScript file. Smaller files are quicker to download, improving website loading speed, especially on slower connections or mobile devices.</p> </li> <li> <p>Faster Loading Times: Smaller JavaScript files lead to faster loading times for your web pages. This is critical for providing a seamless user experience, as faster loading times contribute to lower bounce rates and higher user engagement.</p> </li> <li> <p>Bandwidth Savings: Minified files consume less bandwidth, making your website more accessible to users with limited data plans or in areas with slower internet connections.</p> </li> <li> <p>Improved Performance: When a browser parses and executes smaller JavaScript files, it requires less processing time. This results in improved overall website performance and responsiveness.</p> </li> <li> <p>Search Engine Optimization (SEO): Faster loading times positively influence your website's search engine ranking. Search engines value websites that offer better user experiences, and site speed is a factor in that assessment.</p> </li> </ol> <p>For these reasons it can be benifical to minify the JavaScript code for the experiment.</p>"},{"location":"development/reduce-load-time/#online-tools","title":"Online Tools","text":"<p>There are various online tools that allow to paste your JavaScript code and receive the minified version. Some popular options include:</p> <ol> <li>JSCompress</li> <li>UglifyJS</li> <li>Minifier</li> </ol> <p>These tools automatically remove unnecessary spaces, line breaks, and comments, resulting in a minified version of your code.</p>"},{"location":"experiment-type/splittest/","title":"Split Test","text":"<p>The configuration remains unchanged. However, for this specific scenario, the code presented below can be applied within 'Experiment 1 - Variant'. The provided code will facilitate user redirection to a new page. Moreover, it will retain the URL parameters, subsequently reapplying them after the redirection process if they exist.</p> <p>Important, do not forget to change the link!</p> <pre><code>&lt;script&gt;\n(function() {\n'use strict';\nvar queryParams = new URLSearchParams(window.location.search);\nvar newUrl = 'https://sandervolbeda.com/';\nif (queryParams.toString()) {\nnewUrl += '?' + queryParams.toString();\n}\nwindow.location.href = newUrl;\n})();\n&lt;/script&gt;\n</code></pre>"},{"location":"experiment-type/splittest/#javascript-explained","title":"JavaScript explained","text":"<p>This JavaScript code performs the following steps:</p> <ol> <li>The code is enclosed within an immediately invoked function expression (IIFE) to isolate its scope and ensure that it operates independently without interfering with other scripts.</li> <li><code>use</code> strict is set at the beginning to enforce stricter adherence to JavaScript's syntax and prevent certain errors.</li> <li>The code utilizes the <code>URLSearchParams</code> object to extract and handle the parameters from the current URL's query string (the part of a URL after the '?' sign that contains key-value pairs).</li> <li>A new URL, <code>'https://sandervolbeda.com/'</code>, is created as the destination for redirection.</li> <li>The script checks if there are any query parameters present in the current URL. If so, it appends them to the new URL to ensure the parameters are carried over to the redirected page.</li> <li>Finally, the code changes the <code>window.location.href</code> to the newly constructed URL, effectively triggering a redirect to the new URL while retaining any query parameters from the original URL.</li> </ol> <p>In summary, this script captures the query parameters from the current URL, constructs a new URL with these parameters, and then redirects the user to the new URL. This can be useful for scenarios where specific data needs to be maintained across a redirection process.</p> <pre><code>&lt;script&gt;\n(function() {\n'use strict';\n// Get the current URL parameters\nvar queryParams = new URLSearchParams(window.location.search);\n// Create the new URL with the current parameters\nvar newUrl = 'https://sandervolbeda.com/';\n// Append the parameters if they exist\nif (queryParams.toString()) {\nnewUrl += '?' + queryParams.toString();\n}\n// Redirect to the new URL\nwindow.location.href = newUrl;\n})();\n&lt;/script&gt;\n</code></pre>"},{"location":"getting-started/checklist/","title":"Checklist","text":"<p>Below is a quick checklist of what you need to get started.</p> <ol> <li>Google Tag Manager must be connected to the website.</li> <li>Publishing rights must be granted within the Google Tag Manager container.</li> <li>Google Analytics must be connected to the website.</li> <li>Admin access must be granted to the Google Analytics account that is linked.</li> <li>Basic knowledge of HTML, CSS, and JavaScript (JS) is recommended.</li> </ol>"},{"location":"getting-started/debug/","title":"Debug","text":"<p>Before publishing the setup or commencing a new experiment, it is crucial to ensure that it is functioning correctly. Otherwise, confidence in the experiment's results and the collected data cannot be assured.</p>"},{"location":"getting-started/debug/#gtm-experiments","title":"GTM experiments","text":"<p>To verify that the experiment is working properly, we need to preview the changes on the website via Google Tag Manager (GTM).</p> <ol> <li>Open the Preview mode in GTM.</li> <li> <p>Navigate to the second step of the preview. The Experiment 1 \u2013 Splitter tag should be fired.</p> <p></p> </li> <li> <p>Move to the Variables tab and check if a Slot has been set with the Version (bottom row)</p> <p></p> </li> <li> <p>Navigate to step 3 in the left sidebar and verify whether Experiment 1 has been triggered. Depending on your version, the Control should be fired if your slot falls between 0 and 4, while the Variant should be fired if the slot value ranges from 5 to 9.</p> <p></p> </li> <li> <p>Open the website (still in preview mode of GTM), right-click and select Inspect. Now open the Console tab and check if there\u2019s anywhere <code>Control loaded</code> or <code>Variant loaded</code> in the content.</p> <p></p> </li> </ol> <p>Leave the GTM preview mode open before heading to the next step.</p>"},{"location":"getting-started/debug/#ga-events","title":"GA events","text":"<p>To use the Debugger view in GA, you will need to add the Google Analytics Debugger extension to your browser. This functionality applies to every website present in your Google Analytics account.</p> <ol> <li>Activate the extension on the preview page of GTM.</li> <li>Go to Admin &gt; Account &gt; Property in the GA account.</li> <li>Check for DebugView (the last item in the first list).</li> <li>Select your device from the dropdown. This may be difficult, but please try.</li> <li>Check if the Version is shown in the debug list.</li> </ol> <p>If the tag is configured correctly, there should be an orange user property with the version just below the page view event.</p> <p></p> <p>Remember, as mentioned earlier, it can take up to 48 hours for data to be </p>"},{"location":"getting-started/folder-structure/","title":"Folder Structure","text":"<p>Since there are numerous tags, triggers, and variables involved in experimentation, it is advisable to organize everything related to experimentation into a single folder (or create multiple folders if you prefer to structure them per experiment).</p> <ol> <li>Open Google Tag Manager.</li> <li>Select Folders in the left-hand menu.</li> <li>Click New Folder.</li> <li>Name it: Experimentation.</li> <li>Select all Experimentation-related items (do not include GA configuration).</li> <li>Select Move and move the items to the Experimentation folder.</li> </ol> <p></p>"},{"location":"getting-started/google-analytics/","title":"Google Analytics","text":"<p>Creating a custom definition in Google Analytics (GA) is the first step. This will connect GA and GTM. It is important to start with this step, as it can take time for data to appear in GA4.</p> <p>It is important to note that, with the current setup, one user can only view one experiment. Therefore, running multiple experiments at the same time will drastically reduce the number of users in each experiment.</p> <ol> <li>Open Google Analytics.</li> <li>Go to Account &gt; Property.</li> <li>Click Custom definitions in the property list.</li> <li>Click the button Create custom dimensions.</li> <li> <p>Fill all the fields with the following details</p> Field: Input: Dimension name Version Scope User Description Used for analysing experiments from GTM User property Version </li> <li> <p>Save</p> </li> </ol> <p></p> <p>One downside of GA is that it can take time for data to appear. In some cases, it may take up to 48 hours after creating a custom definition for data to start showing in GA.</p>"},{"location":"getting-started/google-tag-manager/","title":"Google Tag Manager","text":""},{"location":"getting-started/google-tag-manager/#workspace","title":"Workspace","text":"<p>It is recommended to avoid working directly on the master branch (or the default Workspace in this case). To begin, launch GTM (Google Tag Manager). In the left sidebar, locate the Default Workspace option and click on it. Then, in the upper right corner, look for the + icon and click on it.</p> <p></p> Field: Input: Name Experimentation setup Description Setting up everything to start with experimentation <p>Save.</p> <p>This will help ensure that no one else is working on the same version of the code as we are. It is a security measure to prevent conflicts and data loss.</p>"},{"location":"getting-started/google-tag-manager/#variable-version","title":"Variable (Version)","text":"<p>The first step is to create a new variable. This JavaScript will create the <code>version</code> row in the visitor's browser <code>localStorage</code>.</p> <p>It is important to note that browsers do not automatically reset <code>localStorage</code>, unlike cookies. Visitors can manually reset it by clearing their browser's cache and other stored data, but this is unlikely. As a result, running experiments in this manner can last longer than cookies that are automatically reset, which can improve the accuracy of your data.</p> <p>Steps:</p> <ol> <li>In the sidebar, navigate to Variables.</li> <li>Click Add new User-Defined Variable.</li> <li>Name the variable Version.</li> <li>In the Variable Configuration section, select Variable Type as Custom JavaScript.</li> <li>Copy and paste the following code into the variable:     <pre><code>function() {\nvar keyValue = localStorage.getItem('version');\nreturn keyValue;\n}\n</code></pre></li> <li>Save</li> </ol> <p></p>"},{"location":"getting-started/google-tag-manager/#triggers","title":"Triggers","text":"<p>Next, the triggers. Three triggers are required to execute a single experiment:</p> <ul> <li>Initialization trigger: This trigger fires when the experiment is first initialized.</li> <li>Control \u2013 Page View: This trigger fires when a visitor views the control page.</li> <li>Variant \u2013 Page View: This trigger fires when a visitor views the variant page.</li> </ul>"},{"location":"getting-started/google-tag-manager/#initialization","title":"Initialization","text":"<p>This trigger fires when the experiment is first initialized. To create it, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Triggers.</li> <li>Click the New button to create a new trigger.</li> <li>Name the trigger Experiment 1 \u2013 Initialization.</li> <li>Select Initialization as Page View.</li> <li> <p>Select This trigger fires on as Some Initialization Events.</p> Field: Input: First Page path Second equals Third / </li> <li> <p>Click Save.</p> </li> </ol> <ol> <li> <p>If the Path option is not in the list, select Choose Built-In Variable and then select Page path.</p> </li> <li> <p>The third field with the <code>/</code> represents the homepage.</p> </li> <li> <p>This is also where you can add more requirements, such as device targeting.</p> </li> </ol> <p></p>"},{"location":"getting-started/google-tag-manager/#control-page-view","title":"Control - Page View","text":"<p>Next, we will create the trigger for the control experiment. To do this, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Triggers.</li> <li>Click the New button to create a new trigger.</li> <li>Name the trigger Experiment 1 \u2013 Control \u2013 Page View.</li> <li>In the Trigger Configuration section, select Trigger Type as Page View and Trigger Event as Page View.</li> <li>In the Trigger Details section, select This trigger fires on as Some Page Views.</li> <li> <p>Add the following details to the first row.</p> Field: Input: First Version Second matches RegEx Third <code>Slot 0$|Slot 1$|Slot 2$|Slot 3$|Slot 4</code> </li> <li> <p>Add an additional row with the following details.</p> Field: Input: First Page path Second equals Third / </li> <li> <p>Click Save.</p> </li> </ol> <p></p>"},{"location":"getting-started/google-tag-manager/#variant-page-view","title":"Variant - Page View","text":"<p>Now, let\u2019s delve into the experiment trigger (for the variant).</p> <ol> <li>In Google Tag Manager, navigate to Triggers.</li> <li>Click the New button to create a new trigger.</li> <li>Name the trigger Experiment 1 \u2013 Variant \u2013 Page View.</li> <li>In the Trigger Configuration section, select Trigger Type as Page View and Trigger Event as Page View.</li> <li>In the Trigger Details section, select This trigger fires on as Some Page Views.</li> <li> <p>Add the following details to the first row.</p> Field: Input: First Version Second matches RegEx Third <code>Slot 5$|Slot 6$|Slot 7$|Slot 8$|Slot 9$</code> </li> <li> <p>Add an additional row with the following details.</p> Field: Input: First Page path Second equals Third / </li> <li> <p>Click Save.</p> </li> </ol> <p></p>"},{"location":"getting-started/google-tag-manager/#tags","title":"Tags","text":"<p>It is now time to add three new tags and make adjustments to the  configuration. This will ensure that the data is sent to the custom definition we created in GA.</p>"},{"location":"getting-started/google-tag-manager/#splitter-tag","title":"Splitter Tag","text":"<p>Once the Initialization trigger has been activated, we will use a tag to randomly assign visitors to either the control or variant. This split tag will be triggered accordingly.</p> <p>To create the split tag, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Tags.</li> <li>Click the New button to create a new tag.</li> <li>Name the tag Experiment 1 \u2013 Splitter.</li> <li>In the Tag Configuration section, select Tag Type as Custom HTML.</li> <li> <p>Copy and paste the following code into the Custom HTML block:</p> <pre><code>&lt;script&gt;\n(function () {\nvar slots = 10;\nvar version;\nif (localStorage.getItem('version')) {\nversion = localStorage.getItem('version');\n} else {\nvar random = Math.floor(Math.random() * slots);\nversion = 'Slot ' + (random);\nlocalStorage.setItem('version', version);\n}\nreturn version;\n})();\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Select the Trigger as Experiment 1 \u2013 Initialization.</p> </li> <li>Click Save.</li> </ol> <p></p>"},{"location":"getting-started/google-tag-manager/#control-tag","title":"Control Tag","text":"<p>Once the splitter tag has successfully executed and the user falls within one of the slots from 0 to 4, the control tag will be triggered.</p> <p>To create the control tag, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Tags.</li> <li>Click the New button to create a new tag.</li> <li>Name the tag Experiment 1 \u2013 Control \u2013 Script.</li> <li>In the Tag Configuration section, select Tag Type as Custom HTML.</li> <li> <p>Copy and paste the following code into the Custom HTML block:</p> <pre><code>&lt;script&gt;\n(function () {\n// experiment code here\nconsole.log(\"Control loaded\");\n})();\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Select the Trigger as Experiment 1 \u2013 Control \u2013 Page View.</p> </li> <li>Click Save.</li> </ol> <p>A script is also being run for the control variant. This allows for additional tracking to be set up, for example.</p> <p></p>"},{"location":"getting-started/google-tag-manager/#variant-tag","title":"Variant Tag","text":"<p>Once the splitter tag has successfully executed and the user falls within one of the slots from 5 to 9, the variant tag will be triggered.</p> <p>To create the variant tag, follow these steps:</p> <ol> <li>In Google Tag Manager, navigate to Tags.</li> <li>Click the New button to create a new tag.</li> <li>Name the tag Experiment 1 \u2013 Variant \u2013 Script.</li> <li>In the Tag Configuration section, select Tag Type as Custom HTML.</li> <li> <p>Copy and paste the following code into the Custom HTML block:</p> <pre><code>&lt;script&gt;\n(function () {\n// experiment code here\nconsole.log(\"Variant loaded\");\n})();\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Select the Trigger as Experiment 1 \u2013 Variant \u2013 Page View.</p> </li> <li>Click Save.</li> </ol> <p>This is where you can add the JavaScript for your experiment to manipulate the page.</p> <p></p>"},{"location":"getting-started/google-tag-manager/#ga-confirguration-tag","title":"GA Confirguration tag","text":"<p>To complete the setup, we need to edit the Google Analytics tag.</p> <ol> <li>Open the GA configuration tag.</li> <li>In the User Properties section, add a new row.</li> <li>In the Property name field, enter <code>Version</code>.</li> <li>In the Value field, enter the value of the <code>Version</code> variable.</li> <li>Click Save.</li> </ol> <p></p>"},{"location":"getting-started/publish-experiment/","title":"Publish Setup/Experiment","text":"<p>The setup is complete. To publish the experiment, follow these steps:</p> <ol> <li>Click the blue Submit button in the top right corner.</li> <li>Click Publish.</li> <li>Close the slide-in.</li> <li>Go to Workspace tab.</li> <li>Click Update (next to This workspace is out of date).</li> <li>Click Update.</li> </ol> <p></p> <p>The experiment is now live!</p> <p>Important: Always start with an A/A test, which means no changes to the website, to make sure you collect the data you need. This setup includes an A/A test. Once you have published everything, make sure to check your website and the page you are running the experiment on with the console log of the developer tools. This will either show the message Control loaded or Variant loaded.</p>"},{"location":"getting-started/scheduling/","title":"Scheduling","text":"<p>There is the possibility to schedule experiments. This can be done by setting up a custom firing scheduling for all the experimentation tags.</p> <p>Enable the custom tag firing schedule on the following tags:</p> <ul> <li>Experiment 1 \u2013 Control \u2013 Script</li> <li>Experiment 1 \u2013 Variant A \u2013 Script</li> <li>Experiment 1 \u2013 Splitter</li> </ul> <ol> <li>Open the tag.</li> <li>Open Advanced Settings.</li> <li>Enable custom tag firing schedule.</li> <li>Select the start and end date (including times).</li> <li>Repeat these steps for all related tags to the scheduled experiment.</li> </ol> <p></p>"},{"location":"getting-started/view-experiment/","title":"View Experiment (Live Site)","text":"<p>After your experiment gets published, it's always a good idea to verify if it's performing as expected. Rather than repeatedly opening incognito browsers, let's follow a straightforward guide to easily ascertain which variant is presently active on the website.</p> <ol> <li>Start by launching Google Developer tools.</li> <li>Move to the Application tab located within the tools.</li> <li>Find and access Local Storage from the left sidebar.</li> <li>Pick the URL of the website from the local storage list.</li> <li>Locate the entry named Version.</li> <li>If the Version is set at 0, 1, 2, 3, or 4, it corresponds to the control group. If set at 5, 6, 7, 8, or 9, it pertains to the variant group.</li> <li>Adjust the Version number to observe either the control or the variant.</li> <li>After tweaking the version number, remember to refresh the page.</li> </ol> <p></p> <p>Remember, this approach lets you promptly identify which variant is visible on the live site, all without needing to open numerous incognito browsers. It's a streamlined method to ensure that your experiment is working as intended.</p>"},{"location":"home/about/","title":"About","text":"<p>Hello there! I'm Sander, a Freelance Conversion Optimization (CRO) specialist based in Groningen, the Netherlands. Let me share a bit about myself and my journey in the world of CRO.</p> <p></p> <p>Hire me</p> <p>Born in 1991 and a proud dad of two boys, Wolf and Luca, I'm not just passionate about CRO; I'm also an avid sports enthusiast, a Formula 1 fanatic, and I enjoy building my own CRO SaaS product(s). Working remotely, I've had the privilege to collaborate with international brands, running over 500 experiments and founding CRO-tool.com. My skills encompass CRO (Conversion Optimization), UX (User Experience), Design, and Front-end (HTML, CSS/SCSS, JavaScript), and I'm well-versed in the Google Stack, including Analytics, Tag Manager, and the no longer available Optimize ... the last one is reason why I created this website.</p> <p>You might have come across my work in various publications and podcasts, where I've delved into the fascinating intersection of psychology and CRO. My LinkedIn profile is the place to connect with me and stay updated on my latest insights.</p> <p>Conversion optimization became my calling because I grew tired of opinions ruling the game. It's the data-driven nature of CRO that truly appeals to me. Instead of making sweeping website changes, risking conversion losses, I advocate for optimization through experimentation. By consistently testing and adapting based on customer preferences, we can steadily improve conversion rates.</p> <p>My journey into CRO began with an unexpected twist. Initially, I pursued a career in design but later transitioned into front-end development. Despite the apparent detour, each step contributed to my evolution as a CRO specialist. My professional path all came together to shape my unique expertise in the field.</p> <p>Thank you for taking the time to learn more about me and my passion for conversion optimization. I'm excited about the possibilities this field offers and eager to explore them further with you.</p>"},{"location":"targeting/class-based/","title":"Class Based","text":"<p>To run experiments selectively based on class, follow these steps. This can be used, for example with WordPress. The body class always has the page type assigned to it (if configured correctly). This can be a good solution if page path targeting is not possible.</p>"},{"location":"targeting/class-based/#1-custom-javascript-variable","title":"1. Custom JavaScript Variable","text":"<p>The first step is setting up the variable.</p> <ol> <li>Access Google Tag Manager.</li> <li>Navigate to the Variables section located on the left-hand side.</li> <li>Introduce a new variable by selecting 'New'.</li> <li>Assign the title: Product Page (use the page type that needs to be selected.).</li> <li>Opt for 'Custom JavaScript' under Variable Configuration.</li> <li>Insert the code provided below into the designated text field.</li> </ol> <p><pre><code>function(){\nvar bodyElement = document.querySelector('body');\nvar hasPageProductClass = bodyElement.classList.contains('page-product');\nreturn hasPageProductClass;\n}\n</code></pre> 7. Save the changes.</p>"},{"location":"targeting/class-based/#2-triggers","title":"2. Triggers","text":"<p>The following steps pertain to all triggers labeled as 'Initialisation, Experiment 1 \u2013 Control, Experiment 1 \u2013 Variant'. To exemplify, a single instance will be provided, yet the process remains consistent for all experiment-related triggers.</p> <ol> <li>Access the Triggers section found on the left-hand side.</li> <li>Locate 'Experiment 1 \u2013 Initialisation'.</li> <li>Incorporate an extra row within 'Activate this trigger when an Event occurs and all conditions are true'.<ul> <li>Field 1: Product Page</li> <li>Field 2: equals</li> <li>Field 3: true</li> </ul> </li> <li>Please note that false can also be used if all pages except product pages need to be targeted.</li> <li>Save.</li> </ol> <p>Carry out this procedure similarly for the remaining triggers (Experiment 1 \u2013 Control and Experiment 1 \u2013 Variant).</p> <p>Remember to preview the outcomes within GTM's preview mode prior to finalizing any publishing.</p>"},{"location":"targeting/device/","title":"Device Type","text":"<p>To run experiments selectively for particular devices, follow these steps. No action is needed if the experiment encompasses all devices. However, if the aim is to conduct an experiment solely for mobile users, additional configuration is necessary.</p>"},{"location":"targeting/device/#1-custom-javascript-variable","title":"1. Custom JavaScript Variable","text":"<p>The first step is setting up the variable.</p> <ol> <li>Access Google Tag Manager.</li> <li>Navigate to the Variables section located on the left-hand side.</li> <li>Introduce a new variable by selecting 'New'.</li> <li>Assign the title: Device Category.</li> <li>Opt for 'Custom JavaScript' under Variable Configuration.</li> <li>Insert the code provided below into the designated text field.</li> </ol> <p><pre><code>function(){\nvar width = window.innerWidth,\nscreenType;\nif (width &lt;= 520){\nscreenType = \"mobile\";\n} else if (width &lt;= 992) {\nscreenType = \"tablet\";\n} else {\nscreenType = \"desktop\";\n}\nreturn screenType\n}\n</code></pre> 7. Save the changes.</p>"},{"location":"targeting/device/#2-triggers","title":"2. Triggers","text":"<p>The following steps pertain to all triggers labeled as 'Initialisation, Experiment 1 \u2013 Control, Experiment 1 \u2013 Variant'. To exemplify, a single instance will be provided, yet the process remains consistent for all experiment-related triggers.</p> <ol> <li>Access the Triggers section found on the left-hand side.</li> <li>Locate 'Experiment 1 \u2013 Initialisation'.</li> <li>Incorporate an extra row within 'Activate this trigger when an Event occurs and all conditions are true'.<ul> <li>Field 1: Device Category</li> <li>Field 2: contains</li> <li>Field 3: mobile</li> </ul> </li> <li>Please note that field 3 should be in lowercase. Options consist of mobile, tablet, or desktop.</li> <li>Save the alterations.</li> </ol> <p>Carry out this procedure similarly for the remaining triggers (Experiment 1 \u2013 Control and Experiment 1 \u2013 Variant).</p> <p>Remember to preview the outcomes within GTM's preview mode prior to finalizing any publishing.</p>"},{"location":"targeting/device/#3-javascript-explained","title":"3. JavaScript explained","text":"<p>More information about the JavaScript code.</p> <ul> <li>Retrieves the width of the window.</li> <li>Establishes a variable named screenType.</li> <li>Checks the width against specific values to ascertain the screen type.<ul> <li>If the width is equal to or less than 520 pixels, the screen type is labeled as \"mobile.\"</li> <li>If the width is less than or equal to 992 pixels but greater than 520 pixels, the screen type is considered a \"tablet.\"</li> <li>For widths exceeding 992 pixels, the screen type is identified as \"desktop.\"</li> </ul> </li> <li>Ultimately, the function returns the determined screenType value. This code aids in programmatically recognizing the type of device based on its screen width, ensuring precise device categorization for the subsequent procedures.</li> </ul>"},{"location":"targeting/page-path/","title":"Page Path","text":"<p>A page path, often referred to as a URL path or simply a path, is a specific segment of a Uniform Resource Locator (URL) that identifies the location or address of a particular web page or resource on the internet. It comes after the domain name (or host) in a URL and provides information about the hierarchy or structure of the website's content.</p> <p>In a typical URL format like <code>https://sandervolbeda.com/page/subpage</code>, the page path is the portion after the domain (sandervolbeda.com). In this example, the page path is /page/subpage. Each segment of the path, separated by slashes (/), represents a specific directory or subdirectory within the website's structure.</p> <p>Selecting a page path that matches a specific criterion.</p> <ol> <li>Access the Triggers section found on the left-hand side.</li> <li>Locate 'Experiment 1 \u2013 Initialisation'.</li> <li>Incorporate an extra row within 'Activate this trigger when an Event occurs and all conditions are true'.<ul> <li>Field 1: Page Path</li> <li>Field 2: equals</li> <li>Field 3: /page-here/</li> </ul> </li> <li>Save the alterations.</li> </ol> <p>Please note that field 3 should be in lowercase.</p> <p>Carry out this procedure similarly for the remaining triggers (Experiment 1 \u2013 Control and Experiment 1 \u2013 Variant).</p> <p>Remember to preview the outcomes within GTM's preview mode prior to finalizing any publishing.</p>"}]}